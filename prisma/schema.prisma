// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  EMPLOYER
  ADMIN
}

model User {
  id                   String        @id @default(cuid())
  name                 String
  email                String        @unique
  emailVerified        DateTime?
   headline            String? 
  summary              String?
  skills               String[]
  city                 String?
    state              String?
    country            String?
  token                String?
  resume               String?

  linkedin             String?
    github             String?
    website            String?
  
  image                String?       @default("https://hrty.vercel.app/zO2iET")
  isMachine            Boolean       @default(false)
  passwordHash         String?
  invalidLoginAttempts Int           @default(0)
  role                 Role          @default(USER)
  // System
  lockedAt             DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt()
  // Relations
  feedbacks            Feedback[]
  accounts             Account[]
  sessions             Session[]
  activityLogs         ActivityLog[] @relation("UserActivityLog")
  jobs                 Job[]
  applications         Application[]
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String?
  details     Json?
  createdAt   DateTime @default(now())

  user User @relation("UserActivityLog", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  createdAt  DateTime @default(now())
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id        String   @id @default(cuid())
  message   String?
  user      User     @relation(fields: [userId], references: [id]) // Defining a many-to-one relationship
  userId    String // Foreign key 
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

enum JobType {
  REMOTE
  ONSITE
  FULLTIME
  PART_TIME
  CONTRACT
}

enum ExperienceLevel {
  entry
  mid
  senior
  executive
}

enum StatusTypes {
  active
  filled
  expired
}

model Category {
   id                      String           @id @default(cuid())
  title                    String
  slug                     String    @unique 
 createdAt                 DateTime @default(now())
 updatedAt                 DateTime @updatedAt()
 jobs                      Job[]
}


model Job {
  id             String           @id @default(cuid())
  title          String
  description    String?
  company        String?
  salary         Int
  jobType        JobType
  experience     ExperienceLevel?
  city           String?
  country        String?
  isSaved       Boolean? @default(false)
  status         StatusTypes      @default(active)
  requiredSkills String[] // Array of required skills
  deadline       DateTime

  // Timestamps for record tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  
  category    Category? @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  categoryId  String?
  
  applications Application[]
}


model Application {
  id          String   @id @default(cuid())
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String

  applicant   User     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String

  coverLetter String?
  resume      String?  // URL or file path to the uploaded resume
  status      Status   @default(PENDING)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  PENDING
  SHORTLISTED
  ACCEPTED
  REJECTED
}
